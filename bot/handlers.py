import asyncio

from aiogram import types
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton
from parse_app.db_func import get_latest_article
from parse_app.db_func import search_articles_by_keyword
from parse_app.db_func import get_latest_7_articles

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton('/help'))
keyboard.add(KeyboardButton('/latest'))
keyboard.add(KeyboardButton('/latest7'))


async def send_welcome(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    Args: message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏"
                        " –≤—ã–∑–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                        reply_markup=keyboard)


async def send_help(message: types.Message):
    help_text = (
        "üìú *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/latest - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å\n"
        "/latest - –ü–æ–ª—É—á–∏—Ç—å 7 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "/search <–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ> - –ò—Å–∫–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö\n"
        "–ù–æ –∑–Ω–∞–π —á—Ç–æ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞, —ç—Ç–æ —Å–ª–æ–∂–Ω–æ –∏ –ø–æ–∫–∞ –ø—Ä–∏–¥–µ—Ç—Å—è –∏—Å–∫–∞—Ç—å –±–µ–∑ —É—á–µ—Ç–∞ –ø–∞–¥–µ–∂–µ–πüòî\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
    )
    await message.reply(help_text, parse_mode=ParseMode.MARKDOWN)


async def send_latest_article(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /latest. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞—Ç—å—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    Args: message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    article = get_latest_article()

    if article:
        # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏
        slug, title, subtitle, body, url_img, url_video, url_post, datetime = article

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        response = f"*{title}*\n\n"

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        if subtitle:
            response += f"{subtitle}\n\n"
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        if body:
            response += f"{body}\n\n"
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if url_img:
            response += f"[Image]({url_img})\n"
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if url_video:
            response += f"[Video]({url_video})\n"
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if url_post:
            response += f"[Post]({url_post})\n"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
        await message.reply(response, parse_mode=ParseMode.MARKDOWN)
    else:

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.reply("–í–∏–¥–∏–º–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏ü§∑Ô∏è\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å‚è≥\n"
                            "–ü—Ä–∏–º–µ—Ä–Ω–æ 20 —Å–µ–∫—É–Ω–¥\n"
                            "–ï—Å–ª–∏ –∂–µ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ,\n"
                            "—Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —á–µ–ª–æ–≤–µ–∫—É –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª —ç—Ç–æ —á—É–¥–æüòÅ")


async def send_latest_7_articles(message: types.Message):
    articles = await get_latest_7_articles()

    if articles:
        for article in articles:
            await asyncio.sleep(2)
            slug, title, subtitle, body, url_img, url_video, url_post, datetime = article
            response = f"*{title}*\n\n"
            if subtitle:
                response += f"{subtitle}\n\n"
            if body:
                response += f"{body}\n\n"
            if url_img:
                response += f"[Image]({url_img})\n"
            if url_video:
                response += f"[Video]({url_video})\n"
            if url_post:
                response += f"[Post]({url_post})\n"
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            while len(response) > 4096:
                split_index = response.rfind('\n', 0, 4096)
                if split_index == -1:
                    split_index = 4096
                part_to_send = response[:split_index]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º Markdown-—Ä–∞–∑–º–µ—Ç–∫—É
                if part_to_send.count('*') % 2 != 0:
                    part_to_send += '*'
                    response = response[split_index + 1:]
                else:
                    response = response[split_index:]

                await message.reply(part_to_send, parse_mode=ParseMode.MARKDOWN)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            if response:
                await message.reply(response, parse_mode=ParseMode.MARKDOWN)

    else:
        await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ 7 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π.")


async def search_article(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.get_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not args.strip():
        # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ /search")
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    articles = await search_articles_by_keyword(args.strip())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if articles:
        for article in articles:
            slug, title, subtitle, body, url_img, url_video, url_post, datetime = article
            response = f"*{title}*\n\n"
            if subtitle:
                response += f"{subtitle}\n\n"
            if body:
                response += f"{body}\n\n"
            if url_img:
                response += f"[Image]({url_img})\n"
            if url_video:
                response += f"[Video]({url_video})\n"
            if url_post:
                response += f"[Post]({url_post})\n"
            await message.reply(response, parse_mode=ParseMode.MARKDOWN)
    else:
        await message.reply(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{args.strip()}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


async def handle_unknown_message(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–∞–Ω–¥–∞–º.
    Args: message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    await message.reply("–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É —É —Å–µ–±—è –≤ –±–ª–æ–∫–Ω–æ—Ç–∏–∫–µ, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑üòâ")
